// Configuraci√≥n para integraci√≥n con Gemini API
// Este archivo contiene las funciones necesarias para conectar con la API de Gemini

/**
 * Configuraci√≥n de la API de Gemini
 * Nota: En Vite, las variables de entorno se acceden con import.meta.env
 */
const GEMINI_CONFIG = {
  // Usar la API key desde variables de entorno o fallback
  apiKey: import.meta.env?.VITE_GEMINI_API_KEY || 'AIzaSyDA_7eLeeR_BuE2iqRZSauYKYCdJzMoC4A',
  baseUrl: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',
  model: 'gemini-2.0-flash',
  temperature: 0.7,
  maxTokens: 1500, // Aumentado para an√°lisis m√°s detallados
  timeout: 30000 // 30 segundos timeout
};

/**
 * Funci√≥n para generar an√°lisis de rendimiento usando Gemini API
 * @param {Object} datosAnalisis - Datos del rendimiento del estudiante
 * @returns {Promise<Object>} - An√°lisis generado por IA
 */
export const generarAnalisisConGemini = async (datosAnalisis) => {
  try {
    console.log('üöÄ Iniciando an√°lisis con Gemini API');
    console.log('üìä Datos recibidos:', datosAnalisis);
    
    // Validar datos de entrada
    if (!datosAnalisis || !datosAnalisis.simulacion) {
      throw new Error('Datos de an√°lisis inv√°lidos - falta simulaci√≥n');
    }

    // Validar que la API key est√© disponible
    if (!GEMINI_CONFIG.apiKey || GEMINI_CONFIG.apiKey === 'TU_API_KEY_AQUI') {
      throw new Error('API Key de Gemini no configurada correctamente');
    }

    // Crear prompt estructurado para Gemini
    const prompt = crearPromptAnalisis(datosAnalisis);
    console.log('üìù Prompt creado:', prompt.substring(0, 200) + '...');
    
    // Configurar timeout para la petici√≥n
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), GEMINI_CONFIG.timeout);
    
    const requestBody = {
      contents: [{
        parts: [{
          text: prompt
        }]
      }],
      generationConfig: {
        temperature: GEMINI_CONFIG.temperature,
        maxOutputTokens: GEMINI_CONFIG.maxTokens,
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };

    console.log('üåê Realizando petici√≥n a Gemini API...');
    console.log('üîó URL completa:', GEMINI_CONFIG.baseUrl + '?key=' + GEMINI_CONFIG.apiKey);
    
    // Llamada a la API de Gemini
    const response = await fetch(GEMINI_CONFIG.baseUrl + '?key=' + GEMINI_CONFIG.apiKey, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    console.log('üì° Respuesta recibida, status:', response.status);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå Error en la respuesta de Gemini:', errorData);
      
      // Proporcionar mensajes de error m√°s espec√≠ficos
      if (response.status === 404) {
        throw new Error(`Modelo no encontrado. Verifica que el modelo '${GEMINI_CONFIG.model}' est√© disponible. Error: ${errorData.error?.message || 'Modelo no disponible'}`);
      } else if (response.status === 403) {
        throw new Error('Acceso denegado. Verifica que la API key tenga los permisos necesarios.');
      } else if (response.status === 401) {
        throw new Error('API Key inv√°lida. Verifica la configuraci√≥n.');
      } else if (response.status === 429) {
        throw new Error('L√≠mite de peticiones excedido. Intenta en unos minutos.');
      }
      
      throw new Error(`Error en la API de Gemini: ${response.status} - ${errorData.error?.message || 'Error desconocido'}`);
    }

    const data = await response.json();
    console.log('üìÑ Datos de respuesta:', data);
    
    // Verificar que la respuesta tenga el formato esperado
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      console.error('‚ùå Respuesta inv√°lida de Gemini:', data);
      throw new Error('Respuesta inv√°lida de la API de Gemini');
    }
    
    // Procesar respuesta de Gemini
    const analisisTexto = data.candidates[0].content.parts[0].text;
    console.log('üìù Texto de an√°lisis recibido:', analisisTexto.substring(0, 200) + '...');
    
    const resultado = procesarRespuestaGemini(analisisTexto);
    console.log('‚úÖ An√°lisis procesado exitosamente:', resultado);
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå Error completo en generarAnalisisConGemini:', error);
    
    // Manejar diferentes tipos de errores
    if (error.name === 'AbortError') {
      throw new Error('La petici√≥n tard√≥ demasiado tiempo. Intenta nuevamente.');
    }
    
    if (error.message.includes('401')) {
      throw new Error('API Key inv√°lida. Verifica la configuraci√≥n.');
    }
    
    if (error.message.includes('429')) {
      throw new Error('L√≠mite de peticiones excedido. Intenta en unos minutos.');
    }
    
    if (error.message.includes('403')) {
      throw new Error('Acceso denegado. Verifica que la API key tenga los permisos necesarios.');
    }
    
    throw error;
  }
};

/**
 * Generar an√°lisis especializado seg√∫n el tipo de estudiante
 * @param {Object} datosAnalisis - Datos del rendimiento
 * @param {string} tipoEstudiante - Tipo de estudiante (principiante, intermedio, avanzado)
 * @returns {Promise<Object>} - An√°lisis especializado
 */
export const generarAnalisisEspecializado = async (datosAnalisis, tipoEstudiante = 'intermedio') => {
  try {
    console.log('üéØ Generando an√°lisis especializado para:', tipoEstudiante);
    
    // Crear prompt especializado seg√∫n el tipo de estudiante
    const promptEspecializado = crearPromptEspecializado(datosAnalisis, tipoEstudiante);
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), GEMINI_CONFIG.timeout);
    
    const requestBody = {
      contents: [{
        parts: [{
          text: promptEspecializado
        }]
      }],
      generationConfig: {
        temperature: 0.8, // M√°s creatividad para an√°lisis especializado
        maxOutputTokens: 2000, // M√°s tokens para an√°lisis detallado
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };

    const response = await fetch(GEMINI_CONFIG.baseUrl + '?key=' + GEMINI_CONFIG.apiKey, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`Error ${response.status}: ${errorData.error?.message || 'Error desconocido'}`);
    }

    const data = await response.json();
    const analisisTexto = data.candidates[0].content.parts[0].text;
    
    const resultado = procesarRespuestaGemini(analisisTexto);
    
    // Agregar informaci√≥n del tipo de estudiante
    resultado.tipoEstudiante = tipoEstudiante;
    resultado.analisisEspecializado = true;
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå Error en an√°lisis especializado:', error);
    throw error;
  }
};

/**
 * Crear prompt especializado seg√∫n el tipo de estudiante
 * @param {Object} datos - Datos del estudiante
 * @param {string} tipo - Tipo de estudiante
 * @returns {string} - Prompt especializado
 */
const crearPromptEspecializado = (datos, tipo) => {
  const basePrompt = crearPromptAnalisis(datos);
  
  let especializacion = '';
  
  switch (tipo) {
    case 'principiante':
      especializacion = `
ENFOQUE ESPECIALIZADO PARA ESTUDIANTE PRINCIPIANTE:
‚Ä¢ Usar lenguaje simple y claro
‚Ä¢ Proporcionar explicaciones paso a paso
‚Ä¢ Incluir t√©cnicas b√°sicas de estudio
‚Ä¢ Enfocarse en construir confianza
‚Ä¢ Dar recomendaciones graduales
‚Ä¢ Incluir recursos para principiantes
‚Ä¢ Enfatizar la importancia de la pr√°ctica regular
‚Ä¢ Proporcionar ejemplos concretos y simples
      `;
      break;
      
    case 'intermedio':
      especializacion = `
ENFOQUE ESPECIALIZADO PARA ESTUDIANTE INTERMEDIO:
‚Ä¢ Proporcionar an√°lisis balanceado
‚Ä¢ Incluir t√©cnicas de estudio moderadamente avanzadas
‚Ä¢ Conectar conceptos entre materias
‚Ä¢ Sugerir m√©todos de auto-evaluaci√≥n
‚Ä¢ Incluir recursos variados
‚Ä¢ Enfocarse en optimizaci√≥n del tiempo
‚Ä¢ Proporcionar desaf√≠os apropiados
‚Ä¢ Incluir t√©cnicas de mejora continua
      `;
      break;
      
    case 'avanzado':
      especializacion = `
ENFOQUE ESPECIALIZADO PARA ESTUDIANTE AVANZADO:
‚Ä¢ Usar an√°lisis sofisticado y detallado
‚Ä¢ Incluir t√©cnicas avanzadas de estudio
‚Ä¢ Proporcionar estrategias metacognitivas
‚Ä¢ Enfocarse en optimizaci√≥n y eficiencia
‚Ä¢ Incluir recursos especializados
‚Ä¢ Sugerir m√©todos de investigaci√≥n
‚Ä¢ Proporcionar an√°lisis cr√≠tico
‚Ä¢ Incluir t√©cnicas de ense√±anza a otros
      `;
      break;
  }
  
  return basePrompt + especializacion;
};

/**
 * Detectar autom√°ticamente el tipo de estudiante basado en el rendimiento
 * @param {Object} datos - Datos del rendimiento
 * @returns {string} - Tipo de estudiante detectado
 */
export const detectarTipoEstudiante = (datos) => {
  const promedio = datos.promedio;
  const intentos = datos.intentos;
  const eficiencia = datos.promedio / datos.tiempoPromedio;
  
  // Criterios para estudiante avanzado
  if (promedio >= 85 && eficiencia >= 2 && intentos <= 2) {
    return 'avanzado';
  }
  
  // Criterios para estudiante principiante
  if (promedio < 60 || intentos > 5 || eficiencia < 1) {
    return 'principiante';
  }
  
  // Por defecto, intermedio
  return 'intermedio';
}

/**
 * Crear prompt avanzado para an√°lisis completo de rendimiento
 * @param {Object} datos - Datos del estudiante
 * @returns {string} - Prompt avanzado para Gemini
 */
const crearPromptAnalisis = (datos) => {
  const tendenciaGeneral = calcularTendenciaGeneral(datos);
  const patronesAprendizaje = identificarPatronesAprendizaje(datos);
  const nivelDificultad = evaluarNivelDificultad(datos);
  
  return `
Act√∫a como un TUTOR EDUCATIVO EXPERTO con especializaci√≥n en psicolog√≠a educativa, an√°lisis de datos acad√©micos y pedagog√≠a personalizada.

CONTEXTO EDUCATIVO:
Simulaci√≥n: "${datos.simulacion}"
Tipo de evaluaci√≥n: ${datos.tipoEvaluacion || 'Simulacro acad√©mico'}
Nivel educativo: ${datos.nivelEducativo || 'Preparatoria/Universidad'}

DATOS DE RENDIMIENTO DETALLADOS:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä M√âTRICAS GENERALES:
- Intentos realizados: ${datos.intentos}
- Promedio general: ${datos.promedio.toFixed(1)}%
- Tiempo promedio por intento: ${datos.tiempoPromedio.toFixed(1)} minutos
- Mejor tiempo registrado: ${datos.mejorTiempo} minutos
- Tendencia general: ${tendenciaGeneral}
- Patrones de aprendizaje: ${patronesAprendizaje}
- Nivel de dificultad percibido: ${nivelDificultad}

üìà AN√ÅLISIS POR MATERIA:
${datos.materias.map(m => `
‚ñ∂ ${m.nombre}:
  ‚Ä¢ Promedio: ${m.promedio.toFixed(1)}%
  ‚Ä¢ Tendencia: ${m.tendencia}
  ‚Ä¢ Puntajes por intento: ${m.puntajes.join(' ‚Üí ')}
  ‚Ä¢ Mejora: ${calcularMejora(m.puntajes)}%
  ‚Ä¢ Consistencia: ${calcularConsistencia(m.puntajes)}
  ‚Ä¢ Tiempo promedio: ${m.tiempoPromedio || 'N/A'} min
`).join('')}

üîç √ÅREAS DE DIFICULTAD IDENTIFICADAS:
${datos.areasDebiles.map(a => `
‚Ä¢ ${a.nombre}: ${a.promedio.toFixed(1)}%
  - Tipo de dificultad: ${a.tipoDificultad || 'Comprensi√≥n conceptual'}
  - Frecuencia de errores: ${a.frecuenciaErrores || 'Alta'}
`).join('')}

üéØ AN√ÅLISIS TEMPORAL:
- Eficiencia temporal: ${calcularEficienciaTemporal(datos)}
- Gesti√≥n del tiempo: ${evaluarGestionTiempo(datos)}
- Curva de aprendizaje: ${datos.curvaAprendizaje || 'Ascendente'}

INSTRUCCIONES PARA AN√ÅLISIS AVANZADO:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. **AN√ÅLISIS PSICOPEDAG√ìGICO**: Eval√∫a el estilo de aprendizaje, motivaci√≥n y confianza acad√©mica
2. **DIAGN√ìSTICO COGNITIVO**: Identifica fortalezas y debilidades en diferentes tipos de pensamiento
3. **ESTRATEGIAS METACOGNITIVAS**: Proporciona t√©cnicas de autorregulaci√≥n y monitoreo
4. **PLAN DE INTERVENCI√ìN**: Crea un programa estructurado de mejora acad√©mica
5. **RECURSOS ESPEC√çFICOS**: Recomienda herramientas, libros, videos y ejercicios concretos
6. **SEGUIMIENTO**: Establece indicadores de progreso y metas alcanzables

FORMATO DE RESPUESTA (JSON AVANZADO):
{
  "analisisGeneral": {
    "resumen": "An√°lisis integral del rendimiento acad√©mico...",
    "nivelActual": "B√°sico/Intermedio/Avanzado",
    "potencialEstimado": "Descripci√≥n del potencial acad√©mico",
    "perfilAprendizaje": "Visual/Auditivo/Kinest√©sico/Mixto",
    "motivacion": "Alta/Media/Baja con justificaci√≥n"
  },
  "fortalezasDetalladas": [
    {
      "materia": "Nombre de la materia",
      "nivel": "Excelente/Bueno/Regular",
      "habilidadesEspecificas": ["Habilidad 1", "Habilidad 2"],
      "comentario": "An√°lisis espec√≠fico y constructivo",
      "comoMantener": "Estrategias para mantener el nivel"
    }
  ],
  "areasDeDesarrollo": [
    {
      "materia": "Nombre de la materia",
      "nivelDificultad": "Alta/Media/Baja",
      "tipoProblema": "Conceptual/Procedimental/Actitudinal",
      "diagnostico": "An√°lisis profundo del problema",
      "estrategiasPrincipales": ["Estrategia 1", "Estrategia 2", "Estrategia 3"],
      "recursosRecomendados": ["Recurso 1", "Recurso 2"],
      "tiempoEstimado": "Tiempo para ver mejoras",
      "indicadoresProgreso": ["Indicador 1", "Indicador 2"]
    }
  ],
  "planEstudioPersonalizado": {
    "faseInicial": {
      "duracion": "2-3 semanas",
      "objetivos": ["Objetivo 1", "Objetivo 2"],
      "actividades": [
        {
          "materia": "Nombre",
          "tiempo": "30-45 min diarios",
          "actividad": "Descripci√≥n detallada",
          "recursos": ["Recurso 1", "Recurso 2"],
          "evaluacion": "C√≥mo evaluar el progreso"
        }
      ]
    },
    "faseIntermedia": {
      "duracion": "4-6 semanas",
      "objetivos": ["Objetivo 1", "Objetivo 2"],
      "actividades": [...]
    },
    "faseAvanzada": {
      "duracion": "6-8 semanas",
      "objetivos": ["Objetivo 1", "Objetivo 2"],
      "actividades": [...]
    }
  },
  "tecnicasEstudio": {
    "metodosRecomendados": ["M√©todo 1", "M√©todo 2", "M√©todo 3"],
    "organizacionTiempo": "Sugerencias espec√≠ficas de horarios",
    "ambienteEstudio": "Recomendaciones para el espacio de estudio",
    "tecnicasMemorizacion": ["T√©cnica 1", "T√©cnica 2"],
    "controlAnsiedad": "Estrategias para manejar el estr√©s acad√©mico"
  },
  "seguimientoEvaluacion": {
    "metasCortoplazo": ["Meta 1", "Meta 2"],
    "metasMedianoplazo": ["Meta 1", "Meta 2"],
    "metasLargoplazo": ["Meta 1", "Meta 2"],
    "indicadoresExito": ["Indicador 1", "Indicador 2"],
    "frecuenciaEvaluacion": "Semanal/Quincenal/Mensual",
    "ajustesNecesarios": "C√≥mo y cu√°ndo modificar el plan"
  },
  "recursosAdicionales": {
    "librosRecomendados": ["Libro 1", "Libro 2"],
    "videosEducativos": ["Video 1", "Video 2"],
    "aplicacionesUtiles": ["App 1", "App 2"],
    "paginasWeb": ["Sitio 1", "Sitio 2"],
    "ejerciciosPracticos": ["Ejercicio 1", "Ejercicio 2"]
  },
  "mensajeMotivacional": "Mensaje personalizado inspirador y realista que reconozca los logros y motive a continuar mejorando"
}

IMPORTANTE: Proporciona un an√°lisis profundo, espec√≠fico y personalizado. Usa datos concretos y evita generalidades. El an√°lisis debe ser constructivo, motivador y orientado a la acci√≥n.

Responde SOLO con el JSON, sin texto adicional.
`;
};

/**
 * Generar an√°lisis espec√≠fico por √°rea acad√©mica
 * @param {Object} datosAnalisis - Datos del rendimiento
 * @param {string} area - √Årea espec√≠fica (matematicas, ciencias, lenguaje, etc.)
 * @returns {Promise<Object>} - An√°lisis espec√≠fico del √°rea
 */
export const generarAnalisisPorArea = async (datosAnalisis, area) => {
  try {
    console.log('üéØ Generando an√°lisis espec√≠fico para √°rea:', area);
    
    const promptArea = crearPromptPorArea(datosAnalisis, area);
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), GEMINI_CONFIG.timeout);
    
    const requestBody = {
      contents: [{
        parts: [{
          text: promptArea
        }]
      }],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1800,
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };

    const response = await fetch(GEMINI_CONFIG.baseUrl + '?key=' + GEMINI_CONFIG.apiKey, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`Error ${response.status}: ${errorData.error?.message || 'Error desconocido'}`);
    }

    const data = await response.json();
    const analisisTexto = data.candidates[0].content.parts[0].text;
    
    const resultado = procesarRespuestaGemini(analisisTexto);
    
    // Agregar informaci√≥n del √°rea espec√≠fica
    resultado.areaEspecifica = area;
    resultado.analisisPorArea = true;
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå Error en an√°lisis por √°rea:', error);
    throw error;
  }
};

/**
 * Crear prompt especializado para an√°lisis por √°rea
 * @param {Object} datos - Datos del estudiante
 * @param {string} area - √Årea espec√≠fica
 * @returns {string} - Prompt especializado
 */
const crearPromptPorArea = (datos, area) => {
  const materiasDelArea = datos.materias.filter(m => 
    m.nombre.toLowerCase().includes(area.toLowerCase()) ||
    obtenerMateriasDeArea(area).some(ma => 
      m.nombre.toLowerCase().includes(ma.toLowerCase())
    )
  );
  
  const basePrompt = crearPromptAnalisis(datos);
  
  const especializacionArea = `
AN√ÅLISIS ESPECIALIZADO PARA √ÅREA: ${area.toUpperCase()}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

MATERIAS DEL √ÅREA EVALUADAS:
${materiasDelArea.map(m => `
‚Ä¢ ${m.nombre}: ${m.promedio.toFixed(1)}%
  - Puntajes: ${m.puntajes.join(' ‚Üí ')}
  - Mejora: ${calcularMejora(m.puntajes)}%
  - Consistencia: ${calcularConsistencia(m.puntajes).toFixed(2)}
`).join('')}

COMPETENCIAS ESPEC√çFICAS DEL √ÅREA:
${obtenerCompetenciasDeArea(area).map(c => `‚Ä¢ ${c}`).join('\n')}

RECURSOS ESPECIALIZADOS:
${obtenerRecursosEspecializados(area).map(r => `‚Ä¢ ${r}`).join('\n')}

ENFOQUE ESPECIALIZADO:
${obtenerEnfoqueEspecializadoArea(area)}

INSTRUCCIONES ADICIONALES:
‚Ä¢ Analiza patrones espec√≠ficos del √°rea ${area}
‚Ä¢ Identifica prerrequisitos no dominados
‚Ä¢ Proporciona estrategias espec√≠ficas del √°rea
‚Ä¢ Incluye conexiones interdisciplinarias
‚Ä¢ Sugiere proyectos pr√°cticos del √°rea
‚Ä¢ Recomienda herramientas especializadas
`;
  
  return basePrompt + especializacionArea;
};

/**
 * Obtener materias asociadas a un √°rea espec√≠fica
 * @param {string} area - √Årea acad√©mica
 * @returns {Array} - Array de materias relacionadas
 */
const obtenerMateriasDeArea = (area) => {
  const areasMap = {
    'matematicas': ['matem√°ticas', '√°lgebra', 'geometr√≠a', 'c√°lculo', 'trigonometr√≠a', 'estad√≠stica'],
    'ciencias': ['f√≠sica', 'qu√≠mica', 'biolog√≠a', 'ciencias naturales'],
    'lenguaje': ['espa√±ol', 'literatura', 'redacci√≥n', 'comunicaci√≥n', 'gram√°tica'],
    'sociales': ['historia', 'geograf√≠a', 'civismo', 'sociolog√≠a', 'antropolog√≠a'],
    'ingles': ['ingl√©s', 'english', 'idiomas', 'lengua extranjera']
  };
  
  return areasMap[area.toLowerCase()] || [];
};

/**
 * Obtener competencias espec√≠ficas de un √°rea
 * @param {string} area - √Årea acad√©mica
 * @returns {Array} - Array de competencias
 */
const obtenerCompetenciasDeArea = (area) => {
  const competenciasMap = {
    'matematicas': [
      'Pensamiento l√≥gico-matem√°tico',
      'Resoluci√≥n de problemas',
      'An√°lisis num√©rico',
      'Razonamiento abstracto',
      'Modelado matem√°tico'
    ],
    'ciencias': [
      'M√©todo cient√≠fico',
      'An√°lisis experimental',
      'Observaci√≥n sistem√°tica',
      'Formulaci√≥n de hip√≥tesis',
      'Interpretaci√≥n de datos'
    ],
    'lenguaje': [
      'Comprensi√≥n lectora',
      'Expresi√≥n escrita',
      'Comunicaci√≥n oral',
      'An√°lisis textual',
      'Creatividad literaria'
    ],
    'sociales': [
      'Pensamiento cr√≠tico',
      'An√°lisis hist√≥rico',
      'Comprensi√≥n cultural',
      'Interpretaci√≥n geogr√°fica',
      'Conciencia social'
    ],
    'ingles': [
      'Comprensi√≥n auditiva',
      'Expresi√≥n oral',
      'Comprensi√≥n lectora',
      'Expresi√≥n escrita',
      'Competencia intercultural'
    ]
  };
  
  return competenciasMap[area.toLowerCase()] || ['Competencias generales del √°rea'];
};

/**
 * Obtener recursos especializados para un √°rea
 * @param {string} area - √Årea acad√©mica
 * @returns {Array} - Array de recursos
 */
const obtenerRecursosEspecializados = (area) => {
  const recursosMap = {
    'matematicas': [
      'GeoGebra para visualizaci√≥n',
      'Wolfram Alpha para c√°lculos',
      'Khan Academy matem√°ticas',
      'Libros de ejercicios graduados',
      'Calculadoras especializadas'
    ],
    'ciencias': [
      'Simuladores virtuales',
      'Videos de experimentos',
      'Laboratorios virtuales',
      'Revistas cient√≠ficas',
      'Documentales especializados'
    ],
    'lenguaje': [
      'Diccionarios especializados',
      'Bibliotecas digitales',
      'Talleres de escritura',
      'Plataformas de lectura',
      'Herramientas de correcci√≥n'
    ],
    'sociales': [
      'Atlas digitales',
      'Documentales hist√≥ricos',
      'Museos virtuales',
      'L√≠neas de tiempo interactivas',
      'Mapas conceptuales'
    ],
    'ingles': [
      'Duolingo/Babbel',
      'Pel√≠culas con subt√≠tulos',
      'Podcast en ingl√©s',
      'Intercambio de idiomas',
      'Libros graduados'
    ]
  };
  
  return recursosMap[area.toLowerCase()] || ['Recursos generales del √°rea'];
};

/**
 * Obtener enfoque especializado para un √°rea
 * @param {string} area - √Årea acad√©mica
 * @returns {string} - Enfoque especializado
 */
const obtenerEnfoqueEspecializadoArea = (area) => {
  const enfoquesMap = {
    'matematicas': 'Enf√≥cate en construir bases s√≥lidas, practica problemas graduales, usa visualizaciones y conecta con aplicaciones reales.',
    'ciencias': 'Desarrolla curiosidad cient√≠fica, practica el m√©todo experimental, conecta teor√≠a con pr√°ctica y mant√©n un diario de observaciones.',
    'lenguaje': 'Lee diversas fuentes, practica escritura diaria, desarrolla vocabulario activo y participa en discusiones literarias.',
    'sociales': 'Desarrolla pensamiento cr√≠tico, conecta eventos hist√≥ricos con actualidad, analiza diferentes perspectivas y practica la argumentaci√≥n.',
    'ingles': 'Practica las 4 habilidades (hablar, escuchar, leer, escribir), sum√©rgete en el idioma y no temas cometer errores.'
  };
  
  return enfoquesMap[area.toLowerCase()] || 'Desarrolla competencias espec√≠ficas del √°rea con pr√°ctica constante y recursos especializados.';
};

/**
 * Procesar la respuesta de Gemini y convertirla a formato utilizable
 * @param {string} respuestaTexto - Respuesta de Gemini
 * @returns {Object} - Objeto procesado
 */
/**
 * Procesar respuesta de Gemini para extraer an√°lisis estructurado
 * @param {string} respuestaTexto - Respuesta de Gemini
 * @returns {Object} - An√°lisis procesado
 */
const procesarRespuestaGemini = (respuestaTexto) => {
  try {
    console.log('üîÑ Procesando respuesta de Gemini...');
    
    // Limpiar el texto para extraer solo el JSON
    let jsonTexto = respuestaTexto.trim();
    
    // Buscar el JSON dentro del texto
    const inicioJson = jsonTexto.indexOf('{');
    const finJson = jsonTexto.lastIndexOf('}');
    
    if (inicioJson !== -1 && finJson !== -1) {
      jsonTexto = jsonTexto.substring(inicioJson, finJson + 1);
    }
    
    // Intentar parsear el JSON
    const analisisJson = JSON.parse(jsonTexto);
    
    // Validar estructura del JSON
    const analisisValidado = validarEstructuraAnalisis(analisisJson);
    
    console.log('‚úÖ An√°lisis procesado correctamente');
    return analisisValidado;
    
  } catch (error) {
    console.error('‚ùå Error procesando respuesta de Gemini:', error);
    console.log('üìù Respuesta recibida:', respuestaTexto);
    
    // Fallback: crear an√°lisis b√°sico si el JSON falla
    return crearAnalisisFallback(respuestaTexto);
  }
};

/**
 * Validar y completar estructura del an√°lisis
 * @param {Object} analisis - An√°lisis recibido
 * @returns {Object} - An√°lisis validado
 */
const validarEstructuraAnalisis = (analisis) => {
  const analisisCompleto = {
    analisisGeneral: analisis.analisisGeneral || {
      resumen: 'An√°lisis no disponible',
      nivelActual: 'Intermedio',
      potencialEstimado: 'Evaluaci√≥n pendiente',
      perfilAprendizaje: 'Mixto',
      motivacion: 'Media'
    },
    fortalezasDetalladas: Array.isArray(analisis.fortalezasDetalladas) ? analisis.fortalezasDetalladas : [],
    areasDeDesarrollo: Array.isArray(analisis.areasDeDesarrollo) ? analisis.areasDeDesarrollo : [],
    planEstudioPersonalizado: analisis.planEstudioPersonalizado || {
      faseInicial: {
        duracion: '2-3 semanas',
        objetivos: ['Establecer rutina de estudio'],
        actividades: []
      },
      faseIntermedia: {
        duracion: '4-6 semanas',
        objetivos: ['Consolidar conocimientos'],
        actividades: []
      },
      faseAvanzada: {
        duracion: '6-8 semanas',
        objetivos: ['Dominar contenidos'],
        actividades: []
      }
    },
    tecnicasEstudio: analisis.tecnicasEstudio || {
      metodosRecomendados: ['T√©cnica Pomodoro', 'Mapas conceptuales'],
      organizacionTiempo: 'Estudiar en bloques de 25-30 minutos',
      ambienteEstudio: 'Espacio tranquilo y bien iluminado',
      tecnicasMemorizacion: ['Repetici√≥n espaciada', 'Mnemotecnias'],
      controlAnsiedad: 'T√©cnicas de respiraci√≥n y relajaci√≥n'
    },
    seguimientoEvaluacion: analisis.seguimientoEvaluacion || {
      metasCortoplazo: ['Mejorar en √°reas d√©biles'],
      metasMedianoplazo: ['Aumentar promedio general'],
      metasLargoplazo: ['Dominar todas las materias'],
      indicadoresExito: ['Mejora en puntajes', 'Reducci√≥n de tiempo'],
      frecuenciaEvaluacion: 'Semanal',
      ajustesNecesarios: 'Revisar estrategias seg√∫n progreso'
    },
    recursosAdicionales: analisis.recursosAdicionales || {
      librosRecomendados: ['Recursos espec√≠ficos por materia'],
      videosEducativos: ['Khan Academy', 'Coursera'],
      aplicacionesUtiles: ['Forest', 'Anki'],
      paginasWeb: ['Recursos educativos en l√≠nea'],
      ejerciciosPracticos: ['Simulacros adicionales']
    },
    mensajeMotivacional: analisis.mensajeMotivacional || 'Contin√∫a esforz√°ndote, cada intento es una oportunidad de mejora.',
    puntuacionConfianza: calcularPuntuacionConfianza(analisis),
    recomendacionesPersonalizadas: generarRecomendacionesPersonalizadas(analisis)
  };
  
  return analisisCompleto;
};

/**
 * Crear an√°lisis fallback si falla el procesamiento JSON
 * @param {string} textoRespuesta - Respuesta original
 * @returns {Object} - An√°lisis b√°sico
 */
const crearAnalisisFallback = (textoRespuesta) => {
  return {
    analisisGeneral: {
      resumen: 'Se ha generado un an√°lisis, pero hubo problemas con el formato. Revisa el texto completo para m√°s detalles.',
      nivelActual: 'Intermedio',
      potencialEstimado: 'Evaluaci√≥n en proceso',
      perfilAprendizaje: 'Mixto',
      motivacion: 'Media'
    },
    fortalezasDetalladas: [{
      materia: 'General',
      nivel: 'Bueno',
      habilidadesEspecificas: ['Persistencia', 'Pr√°ctica constante'],
      comentario: 'Muestra dedicaci√≥n al realizar m√∫ltiples intentos.',
      comoMantener: 'Continuar con la pr√°ctica regular'
    }],
    areasDeDesarrollo: [{
      materia: 'General',
      nivelDificultad: 'Media',
      tipoProblema: 'T√©cnico',
      diagnostico: 'Necesita revisar el an√°lisis detallado en el texto completo.',
      estrategiasPrincipales: ['Revisar contenido', 'Practicar m√°s', 'Buscar ayuda'],
      recursosRecomendados: ['Libros de texto', 'Tutor√≠as'],
      tiempoEstimado: '2-4 semanas',
      indicadoresProgreso: ['Mejora en puntajes', 'Mayor velocidad']
    }],
    textoCompleto: textoRespuesta,
    mensajeMotivacional: 'Aunque hubo un problema t√©cnico, tu dedicaci√≥n es evidente. Contin√∫a practicando y mejorando.',
    esFallback: true
  };
};

/**
 * Calcular puntuaci√≥n de confianza del an√°lisis
 * @param {Object} analisis - An√°lisis generado
 * @returns {number} - Puntuaci√≥n de confianza (0-100)
 */
const calcularPuntuacionConfianza = (analisis) => {
  let puntuacion = 70; // Base
  
  if (analisis.fortalezasDetalladas && analisis.fortalezasDetalladas.length > 0) puntuacion += 10;
  if (analisis.areasDeDesarrollo && analisis.areasDeDesarrollo.length > 0) puntuacion += 10;
  if (analisis.planEstudioPersonalizado) puntuacion += 10;
  
  return Math.min(puntuacion, 100);
};

/**
 * Generar recomendaciones personalizadas adicionales
 * @param {Object} analisis - An√°lisis base
 * @returns {Array} - Recomendaciones personalizadas
 */
const generarRecomendacionesPersonalizadas = (analisis) => {
  const recomendaciones = [];
  
  // Recomendaciones basadas en √°reas de desarrollo
  if (analisis.areasDeDesarrollo && analisis.areasDeDesarrollo.length > 0) {
    recomendaciones.push({
      tipo: 'Enfoque prioritario',
      descripcion: `Concentra el 60% de tu tiempo de estudio en: ${analisis.areasDeDesarrollo.slice(0, 2).map(a => a.materia).join(', ')}`,
      prioridad: 'Alta'
    });
  }
  
  // Recomendaciones basadas en fortalezas
  if (analisis.fortalezasDetalladas && analisis.fortalezasDetalladas.length > 0) {
    recomendaciones.push({
      tipo: 'Aprovecha tus fortalezas',
      descripcion: `Usa tu habilidad en ${analisis.fortalezasDetalladas[0].materia} como base para estudiar materias relacionadas`,
      prioridad: 'Media'
    });
  }
  
  return recomendaciones;
};

/**
 * Funci√≥n auxiliar para validar si la API est√° configurada
 * @returns {boolean} - True si est√° configurada
 */
export const esGeminiConfigurado = () => {
  return Boolean(GEMINI_CONFIG.apiKey && GEMINI_CONFIG.apiKey.length > 0);
};

/**
 * Funci√≥n para obtener recomendaciones de recursos adicionales
 * @param {string} materia - Materia espec√≠fica
 * @returns {Array} - Lista de recursos recomendados
 */
export const obtenerRecursosRecomendados = (materia) => {
  const recursos = {
    'Matem√°ticas': [
      { tipo: 'Video', nombre: 'Khan Academy - √Ålgebra', url: 'https://www.khanacademy.org/math/algebra' },
      { tipo: 'Libro', nombre: '√Ålgebra de Baldor', url: '#' },
      { tipo: 'App', nombre: 'Photomath', url: 'https://photomath.com' },
      { tipo: 'Pr√°ctica', nombre: 'Ejercicios de Matem√°ticas', url: '#' }
    ],
    'Espa√±ol': [
      { tipo: 'Web', nombre: 'RAE - Diccionario', url: 'https://dle.rae.es' },
      { tipo: 'Libro', nombre: 'Ortograf√≠a de la RAE', url: '#' },
      { tipo: 'App', nombre: 'Lingolia Espa√±ol', url: '#' },
      { tipo: 'Pr√°ctica', nombre: 'Ejercicios de Gram√°tica', url: '#' }
    ],
    'Ciencias': [
      { tipo: 'Video', nombre: 'Khan Academy - Ciencias', url: 'https://www.khanacademy.org/science' },
      { tipo: 'Web', nombre: 'NASA Education', url: 'https://www.nasa.gov/audience/foreducators/' },
      { tipo: 'App', nombre: 'Elements 4D', url: '#' },
      { tipo: 'Simulador', nombre: 'Laboratorio Virtual', url: '#' }
    ],
    'Ciencias Sociales': [
      { tipo: 'Web', nombre: 'Historia Universal', url: '#' },
      { tipo: 'Video', nombre: 'Documentales Educativos', url: '#' },
      { tipo: 'App', nombre: 'Timeline - Historia', url: '#' },
      { tipo: 'Libro', nombre: 'Atlas Hist√≥rico', url: '#' }
    ],
    'Ingl√©s': [
      { tipo: 'App', nombre: 'Duolingo', url: 'https://www.duolingo.com' },
      { tipo: 'Web', nombre: 'BBC Learning English', url: 'https://www.bbc.co.uk/learningenglish' },
      { tipo: 'Podcast', nombre: 'English Pod', url: '#' },
      { tipo: 'Video', nombre: 'English Grammar Course', url: '#' }
    ],
    'Razonamiento L√≥gico': [
      { tipo: 'App', nombre: 'Lumosity', url: 'https://www.lumosity.com' },
      { tipo: 'Libro', nombre: 'Ejercicios de L√≥gica', url: '#' },
      { tipo: 'Web', nombre: 'Puzzles y Acertijos', url: '#' },
      { tipo: 'Pr√°ctica', nombre: 'Tests de Razonamiento', url: '#' }
    ],
    'Comprensi√≥n Lectora': [
      { tipo: 'App', nombre: 'Reading Comprehension', url: '#' },
      { tipo: 'Libro', nombre: 'T√©cnicas de Lectura R√°pida', url: '#' },
      { tipo: 'Web', nombre: 'Textos y Ejercicios', url: '#' },
      { tipo: 'Pr√°ctica', nombre: 'Tests de Comprensi√≥n', url: '#' }
    ],
    'Conocimientos Generales': [
      { tipo: 'App', nombre: 'Quiz Culture G√©n√©rale', url: '#' },
      { tipo: 'Web', nombre: 'Enciclopedia Britannica', url: 'https://www.britannica.com' },
      { tipo: 'Libro', nombre: 'Almanaque Mundial', url: '#' },
      { tipo: 'Pr√°ctica', nombre: 'Tests de Cultura General', url: '#' }
    ],
    'Habilidades Cuantitativas': [
      { tipo: 'App', nombre: 'Math Tricks', url: '#' },
      { tipo: 'Web', nombre: 'Ejercicios de C√°lculo Mental', url: '#' },
      { tipo: 'Libro', nombre: 'Matem√°ticas B√°sicas', url: '#' },
      { tipo: 'Pr√°ctica', nombre: 'Tests Cuantitativos', url: '#' }
    ]
  };

  return recursos[materia] || [
    { tipo: 'General', nombre: 'Recursos adicionales disponibles', url: '#' },
    { tipo: 'Biblioteca', nombre: 'Consulta tu biblioteca local', url: '#' },
    { tipo: 'Tutor', nombre: 'Considera clases particulares', url: '#' }
  ];
};

/**
 * Funci√≥n para obtener consejos de estudio personalizados
 * @param {string} materia - Materia espec√≠fica
 * @param {number} promedio - Promedio actual
 * @returns {Array} - Lista de consejos personalizados
 */
export const obtenerConsejosEstudio = (materia, promedio) => {
  const consejosBase = {
    'Matem√°ticas': [
      'Practica problemas diariamente, empezando por los m√°s simples',
      'Crea un formulario con las f√≥rmulas m√°s importantes',
      'Explica los problemas en voz alta para reforzar el aprendizaje'
    ],
    'Espa√±ol': [
      'Lee al menos 30 minutos diarios de diferentes tipos de texto',
      'Practica escritura creativa para mejorar redacci√≥n',
      'Usa fichas para aprender nuevas palabras y su significado'
    ],
    'Ciencias': [
      'Relaciona los conceptos con ejemplos de la vida cotidiana',
      'Crea diagramas y mapas conceptuales',
      'Realiza experimentos simples para comprender mejor'
    ],
    'Ingl√©s': [
      'Escucha m√∫sica y ve pel√≠culas en ingl√©s con subt√≠tulos',
      'Practica conversaci√≥n con aplicaciones de intercambio',
      'Lleva un diario escribiendo en ingl√©s'
    ]
  };

  const consejos = consejosBase[materia] || [
    'Organiza tu tiempo de estudio con descansos regulares',
    'Busca diferentes fuentes de informaci√≥n sobre el tema',
    'Practica con ejercicios similares a los del examen'
  ];

  // Personalizar seg√∫n el promedio
  if (promedio < 60) {
    consejos.unshift('Enf√≥cate en conceptos b√°sicos antes de avanzar');
    consejos.push('Considera buscar ayuda de un tutor o profesor');
  } else if (promedio >= 80) {
    consejos.push('Intenta ejercicios m√°s avanzados para desafiarte');
    consejos.push('Ayuda a otros estudiantes, ense√±ar refuerza el aprendizaje');
  }

  return consejos;
};

/**
 * Funci√≥n para verificar modelos disponibles de Gemini
 * @returns {Promise<Array>} - Lista de modelos disponibles
 */
export const verificarModelosDisponibles = async () => {
  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${GEMINI_CONFIG.apiKey}`);
    const data = await response.json();
    
    if (data.models) {
      console.log('üîç Modelos disponibles:', data.models.map(m => m.name));
      return data.models;
    }
    
    return [];
  } catch (error) {
    console.error('‚ùå Error verificando modelos:', error);
    return [];
  }
};

/**
 * Funci√≥n de prueba para verificar que la API de Gemini funciona
 * @returns {Promise<Object>} - Resultado de la prueba
 */
export const probarConexionGemini = async () => {
  try {
    console.log('üß™ Probando conexi√≥n con Gemini API...');
    
    const requestBody = {
      contents: [{
        parts: [{
          text: "Responde con un JSON simple: {\"status\": \"ok\", \"mensaje\": \"Conexi√≥n exitosa\"}"
        }]
      }],
      generationConfig: {
        temperature: 0.1,
        maxOutputTokens: 100,
      }
    };

    const response = await fetch(GEMINI_CONFIG.baseUrl + '?key=' + GEMINI_CONFIG.apiKey, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`Error ${response.status}: ${errorData.error?.message || 'Error desconocido'}`);
    }

    const data = await response.json();
    console.log('‚úÖ Conexi√≥n exitosa con Gemini API');
    return { success: true, data };
    
  } catch (error) {
    console.error('‚ùå Error en prueba de conexi√≥n:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Calcular tendencia general del rendimiento
 * @param {Object} datos - Datos del estudiante
 * @returns {string} - Tendencia general
 */
const calcularTendenciaGeneral = (datos) => {
  const promediosGenerales = datos.materias.map(m => m.promedio);
  const primerosMitad = promediosGenerales.slice(0, Math.floor(promediosGenerales.length / 2));
  const segundaMitad = promediosGenerales.slice(Math.floor(promediosGenerales.length / 2));
  
  const promedioInicial = primerosMitad.reduce((a, b) => a + b, 0) / primerosMitad.length;
  const promedioFinal = segundaMitad.reduce((a, b) => a + b, 0) / segundaMitad.length;
  
  if (promedioFinal > promedioInicial + 5) return 'Mejora significativa';
  if (promedioFinal > promedioInicial) return 'Mejora gradual';
  if (promedioFinal < promedioInicial - 5) return 'Declive preocupante';
  if (promedioFinal < promedioInicial) return 'Declive leve';
  return 'Rendimiento estable';
};

/**
 * Identificar patrones de aprendizaje
 * @param {Object} datos - Datos del estudiante
 * @returns {string} - Patrones identificados
 */
const identificarPatronesAprendizaje = (datos) => {
  const materiasConsistentes = datos.materias.filter(m => calcularConsistencia(m.puntajes) > 0.8);
  const materiasInconsistentes = datos.materias.filter(m => calcularConsistencia(m.puntajes) < 0.6);
  
  if (materiasConsistentes.length > materiasInconsistentes.length) {
    return 'Aprendizaje consistente y estructurado';
  } else if (materiasInconsistentes.length > materiasConsistentes.length) {
    return 'Aprendizaje irregular, necesita estructura';
  }
  return 'Patrones mixtos de aprendizaje';
};

/**
 * Evaluar nivel de dificultad percibido
 * @param {Object} datos - Datos del estudiante
 * @returns {string} - Nivel de dificultad
 */
const evaluarNivelDificultad = (datos) => {
  const promedioGeneral = datos.promedio;
  const tiempoPromedio = datos.tiempoPromedio;
  
  if (promedioGeneral >= 85 && tiempoPromedio <= 30) return 'Nivel apropiado - Alta eficiencia';
  if (promedioGeneral >= 70 && tiempoPromedio <= 45) return 'Nivel adecuado - Eficiencia normal';
  if (promedioGeneral >= 60 && tiempoPromedio <= 60) return 'Nivel desafiante - Requiere m√°s tiempo';
  if (promedioGeneral < 60) return 'Nivel muy desafiante - Necesita apoyo adicional';
  return 'Nivel balanceado';
};

/**
 * Calcular mejora entre intentos
 * @param {Array} puntajes - Array de puntajes
 * @returns {number} - Porcentaje de mejora
 */
const calcularMejora = (puntajes) => {
  if (puntajes.length < 2) return 0;
  const primero = puntajes[0];
  const ultimo = puntajes[puntajes.length - 1];
  return ((ultimo - primero) / primero * 100).toFixed(1);
};

/**
 * Calcular consistencia del rendimiento
 * @param {Array} puntajes - Array de puntajes
 * @returns {number} - √çndice de consistencia (0-1)
 */
const calcularConsistencia = (puntajes) => {
  if (puntajes.length < 2) return 1;
  const promedio = puntajes.reduce((a, b) => a + b, 0) / puntajes.length;
  const desviacion = Math.sqrt(puntajes.reduce((a, b) => a + Math.pow(b - promedio, 2), 0) / puntajes.length);
  return Math.max(0, 1 - (desviacion / promedio));
};

/**
 * Calcular eficiencia temporal
 * @param {Object} datos - Datos del estudiante
 * @returns {string} - Evaluaci√≥n de eficiencia
 */
const calcularEficienciaTemporal = (datos) => {
  const eficiencia = datos.promedio / datos.tiempoPromedio;
  if (eficiencia >= 2) return 'Muy eficiente';
  if (eficiencia >= 1.5) return 'Eficiente';
  if (eficiencia >= 1) return 'Eficiencia normal';
  return 'Necesita mejorar velocidad';
};

/**
 * Evaluar gesti√≥n del tiempo
 * @param {Object} datos - Datos del estudiante
 * @returns {string} - Evaluaci√≥n de gesti√≥n del tiempo
 */
const evaluarGestionTiempo = (datos) => {
  const diferenciaTiempo = datos.tiempoPromedio - datos.mejorTiempo;
  if (diferenciaTiempo <= 5) return 'Gesti√≥n del tiempo consistente';
  if (diferenciaTiempo <= 10) return 'Gesti√≥n del tiempo variable';
  return 'Gesti√≥n del tiempo inconsistente';
};

/**
 * Generar an√°lisis completo avanzado (funci√≥n principal mejorada)
 * @param {Object} datosAnalisis - Datos del rendimiento del estudiante
 * @param {Object} opciones - Opciones de an√°lisis
 * @returns {Promise<Object>} - An√°lisis completo y detallado
 */
export const generarAnalisisCompletoAvanzado = async (datosAnalisis, opciones = {}) => {
  try {
    console.log('üöÄ Iniciando an√°lisis completo avanzado');
    
    // Opciones por defecto
    const opcionesCompletas = {
      incluirAnalisisEspecializado: true,
      incluirAnalisisPorArea: true,
      detectarTipoAutomatico: true,
      generarRecomendacionesPersonalizadas: true,
      ...opciones
    };
    
    // Detectar tipo de estudiante autom√°ticamente
    const tipoEstudiante = opcionesCompletas.detectarTipoAutomatico ? 
      detectarTipoEstudiante(datosAnalisis) : 
      (opciones.tipoEstudiante || 'intermedio');
    
    console.log('üéØ Tipo de estudiante detectado:', tipoEstudiante);
    
    // Generar an√°lisis principal
    const analisisPrincipal = await generarAnalisisConGemini(datosAnalisis);
    
    // Generar an√°lisis especializado si se solicita
    let analisisEspecializado = null;
    if (opcionesCompletas.incluirAnalisisEspecializado) {
      try {
        analisisEspecializado = await generarAnalisisEspecializado(datosAnalisis, tipoEstudiante);
      } catch (error) {
        console.warn('‚ö†Ô∏è Error en an√°lisis especializado:', error.message);
      }
    }
    
    // Identificar √°rea principal de dificultad
    const areaPrincipal = identificarAreaPrincipal(datosAnalisis);
    
    // Generar an√°lisis por √°rea si se solicita
    let analisisPorArea = null;
    if (opcionesCompletas.incluirAnalisisPorArea && areaPrincipal) {
      try {
        analisisPorArea = await generarAnalisisPorArea(datosAnalisis, areaPrincipal);
      } catch (error) {
        console.warn('‚ö†Ô∏è Error en an√°lisis por √°rea:', error.message);
      }
    }
    
    // Combinar todos los an√°lisis
    const analisisCompleto = combinarAnalisis(
      analisisPrincipal,
      analisisEspecializado,
      analisisPorArea,
      tipoEstudiante,
      datosAnalisis
    );
    
    console.log('‚úÖ An√°lisis completo generado exitosamente');
    return analisisCompleto;
    
  } catch (error) {
    console.error('‚ùå Error en an√°lisis completo avanzado:', error);
    throw error;
  }
};

/**
 * Identificar √°rea principal de dificultad
 * @param {Object} datos - Datos del estudiante
 * @returns {string} - √Årea principal identificada
 */
const identificarAreaPrincipal = (datos) => {
  // Encontrar materia con menor promedio
  const materiaDebil = datos.materias.reduce((min, actual) => 
    actual.promedio < min.promedio ? actual : min
  );
  
  // Mapear materia a √°rea
  const materia = materiaDebil.nombre.toLowerCase();
  
  if (materia.includes('matem√°tica') || materia.includes('√°lgebra') || 
      materia.includes('geometr√≠a') || materia.includes('c√°lculo')) {
    return 'matematicas';
  }
  
  if (materia.includes('f√≠sica') || materia.includes('qu√≠mica') || 
      materia.includes('biolog√≠a') || materia.includes('ciencias')) {
    return 'ciencias';
  }
  
  if (materia.includes('espa√±ol') || materia.includes('literatura') || 
      materia.includes('redacci√≥n') || materia.includes('comunicaci√≥n')) {
    return 'lenguaje';
  }
  
  if (materia.includes('historia') || materia.includes('geograf√≠a') || 
      materia.includes('civismo') || materia.includes('sociales')) {
    return 'sociales';
  }
  
  if (materia.includes('ingl√©s') || materia.includes('english')) {
    return 'ingles';
  }
  
  return null;
};

/**
 * Combinar m√∫ltiples an√°lisis en uno completo
 * @param {Object} principal - An√°lisis principal
 * @param {Object} especializado - An√°lisis especializado
 * @param {Object} porArea - An√°lisis por √°rea
 * @param {string} tipoEstudiante - Tipo de estudiante
 * @param {Object} datos - Datos originales
 * @returns {Object} - An√°lisis combinado
 */
const combinarAnalisis = (principal, especializado, porArea, tipoEstudiante, datos) => {
  const analisisCombinado = {
    timestamp: new Date().toISOString(),
    tipoEstudiante,
    metadata: {
      simulacion: datos.simulacion,
      intentos: datos.intentos,
      promedio: datos.promedio,
      tiempoPromedio: datos.tiempoPromedio,
      numeroMaterias: datos.materias.length,
      puntuacionConfianza: principal.puntuacionConfianza || 85
    },
    
    // An√°lisis general (del an√°lisis principal)
    analisisGeneral: principal.analisisGeneral || {},
    
    // Combinar fortalezas de todos los an√°lisis
    fortalezasDetalladas: [
      ...(principal.fortalezasDetalladas || []),
      ...(especializado?.fortalezasDetalladas || []),
      ...(porArea?.fortalezasDetalladas || [])
    ].filter((fortaleza, index, self) => 
      index === self.findIndex(f => f.materia === fortaleza.materia)
    ),
    
    // Combinar √°reas de desarrollo
    areasDeDesarrollo: [
      ...(principal.areasDeDesarrollo || []),
      ...(especializado?.areasDeDesarrollo || []),
      ...(porArea?.areasDeDesarrollo || [])
    ].filter((area, index, self) => 
      index === self.findIndex(a => a.materia === area.materia)
    ),
    
    // Plan de estudio personalizado (tomar el m√°s completo)
    planEstudioPersonalizado: especializado?.planEstudioPersonalizado || 
                             principal.planEstudioPersonalizado || {},
    
    // T√©cnicas de estudio especializadas
    tecnicasEstudio: {
      ...(principal.tecnicasEstudio || {}),
      ...(especializado?.tecnicasEstudio || {}),
      metodosEspecializados: porArea?.tecnicasEstudio?.metodosRecomendados || []
    },
    
    // Seguimiento y evaluaci√≥n
    seguimientoEvaluacion: especializado?.seguimientoEvaluacion || 
                          principal.seguimientoEvaluacion || {},
    
    // Recursos combinados
    recursosAdicionales: {
      ...(principal.recursosAdicionales || {}),
      recursosEspecializados: porArea?.recursosAdicionales || {}
    },
    
    // Recomendaciones personalizadas mejoradas
    recomendacionesPersonalizadas: [
      ...(principal.recomendacionesPersonalizadas || []),
      ...(especializado?.recomendacionesPersonalizadas || []),
      ...(porArea?.recomendacionesPersonalizadas || [])
    ],
    
    // Mensaje motivacional personalizado
    mensajeMotivacional: especializado?.mensajeMotivacional || 
                        principal.mensajeMotivacional || 
                        'Contin√∫a trabajando con dedicaci√≥n, cada paso te acerca a tus objetivos.',
    
    // An√°lisis espec√≠ficos adicionales
    analisisEspecificos: {
      ...(especializado ? { porTipoEstudiante: especializado } : {}),
      ...(porArea ? { porArea: porArea } : {})
    },
    
    // Indicadores de rendimiento calculados
    indicadoresRendimiento: calcularIndicadoresRendimiento(datos),
    
    // Pr√≥ximos pasos recomendados
    proximosPasos: generarProximosPasos(datos, tipoEstudiante)
  };
  
  return analisisCombinado;
};

/**
 * Calcular indicadores de rendimiento adicionales
 * @param {Object} datos - Datos del estudiante
 * @returns {Object} - Indicadores calculados
 */
const calcularIndicadoresRendimiento = (datos) => {
  const promedios = datos.materias.map(m => m.promedio);
  const tiempos = datos.materias.map(m => m.tiempoPromedio || datos.tiempoPromedio);
  
  return {
    promedioGeneral: datos.promedio,
    desviacionEstandar: calcularDesviacionEstandar(promedios),
    coeficienteVariacion: calcularCoeficienteVariacion(promedios),
    eficienciaTemporal: datos.promedio / datos.tiempoPromedio,
    consistenciaGeneral: calcularConsistenciaGeneral(datos.materias),
    tendenciaAprendizaje: calcularTendenciaAprendizaje(datos.materias),
    indiceImprovement: calcularIndiceImprovement(datos.materias)
  };
};

/**
 * Generar pr√≥ximos pasos recomendados
 * @param {Object} datos - Datos del estudiante
 * @param {string} tipoEstudiante - Tipo de estudiante
 * @returns {Array} - Lista de pr√≥ximos pasos
 */
const generarProximosPasos = (datos, tipoEstudiante) => {
  const pasos = [];
  
  // Paso 1: Enfoque en √°rea m√°s d√©bil
  const areaDebil = datos.materias.reduce((min, actual) => 
    actual.promedio < min.promedio ? actual : min
  );
  
  pasos.push({
    orden: 1,
    titulo: `Reforzar ${areaDebil.nombre}`,
    descripcion: `Dedica 40% de tu tiempo de estudio a ${areaDebil.nombre} (promedio actual: ${areaDebil.promedio.toFixed(1)}%)`,
    plazo: '2 semanas',
    prioridad: 'Alta'
  });
  
  // Paso 2: Optimizar tiempo de estudio
  if (datos.tiempoPromedio > 60) {
    pasos.push({
      orden: 2,
      titulo: 'Optimizar tiempo de estudio',
      descripcion: 'Implementar t√©cnica Pomodoro para reducir tiempo promedio de estudio',
      plazo: '1 semana',
      prioridad: 'Media'
    });
  }
  
  // Paso 3: Mantener fortalezas
  const areaFuerte = datos.materias.reduce((max, actual) => 
    actual.promedio > max.promedio ? actual : max
  );
  
  pasos.push({
    orden: 3,
    titulo: `Mantener nivel en ${areaFuerte.nombre}`,
    descripcion: `Practica ${areaFuerte.nombre} 15 minutos diarios para mantener el nivel (promedio actual: ${areaFuerte.promedio.toFixed(1)}%)`,
    plazo: 'Continuo',
    prioridad: 'Baja'
  });
  
  return pasos;
};

/**
 * Calcular funciones auxiliares adicionales
 */
const calcularDesviacionEstandar = (valores) => {
  const promedio = valores.reduce((a, b) => a + b, 0) / valores.length;
  const varianza = valores.reduce((a, b) => a + Math.pow(b - promedio, 2), 0) / valores.length;
  return Math.sqrt(varianza);
};

const calcularCoeficienteVariacion = (valores) => {
  const promedio = valores.reduce((a, b) => a + b, 0) / valores.length;
  const desviacion = calcularDesviacionEstandar(valores);
  return (desviacion / promedio) * 100;
};

const calcularConsistenciaGeneral = (materias) => {
  const consistencias = materias.map(m => calcularConsistencia(m.puntajes));
  return consistencias.reduce((a, b) => a + b, 0) / consistencias.length;
};

const calcularTendenciaAprendizaje = (materias) => {
  const tendencias = materias.map(m => {
    const mejora = calcularMejora(m.puntajes);
    return parseFloat(mejora);
  });
  
  const promedioTendencia = tendencias.reduce((a, b) => a + b, 0) / tendencias.length;
  
  if (promedioTendencia > 10) return 'Mejora significativa';
  if (promedioTendencia > 5) return 'Mejora gradual';
  if (promedioTendencia > -5) return 'Estable';
  return 'Necesita atenci√≥n';
};

const calcularIndiceImprovement = (materias) => {
  const mejoras = materias.map(m => parseFloat(calcularMejora(m.puntajes)));
  const mejorasPositivas = mejoras.filter(m => m > 0).length;
  return (mejorasPositivas / materias.length) * 100;
};
